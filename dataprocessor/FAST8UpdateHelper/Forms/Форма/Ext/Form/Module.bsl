
&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура fast8УдалитьПатчи()
	
	УдаляемыеРасширения = Новый Массив;
	Расширения = РасширенияКонфигурации.Получить();
	Для Каждого Расширение Из Расширения Цикл
		Если СтрНачинаетсяС(Расширение.Имя, "EF_") Тогда
			УдаляемыеРасширения.Добавить(Расширение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Расширение Из УдаляемыеРасширения Цикл
		Расширение.Удалить();
	КонецЦикла;
	
КонецПроцедуры // fast8УдалитьПатчи()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(ПараметрЗапуска, "fast8УдалитьПатчи") > 0 Тогда
		fast8УдалитьПатчи();
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;
	
	Если СтрНайти(ПараметрЗапуска, "fast8ОтключитьМодальноеОкно") > 0 Тогда
		ОтключитьМодальноеОкно();
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;
	
	Если Не ЭтоФайловаяБаза И СтрНайти(ПараметрЗапуска, "fast8ЗапуститьОбновление") > 0 Тогда
		ПодключитьОбработчикОжидания("ПроверитьСтатусОбновления", 10, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервереБезКонтекста
Процедура ОтключитьМодальноеОкно()
	
	СведенияОбОбновлении = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
	ЛегальнаяВерсия = СведенияОбОбновлении.ЛегальнаяВерсия;
	
	Если ЛегальнаяВерсия <> Метаданные.Версия Тогда
		СведенияОбОбновлении.ЛегальнаяВерсия = Метаданные.Версия;
		ОбновлениеИнформационнойБазыСлужебный.ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	КонецЕсли;
	
КонецПроцедуры // ОтключитьМодальноеОкно

&НаКлиенте
Процедура ПроверитьСтатусОбновления()
	
	ОтложенноеОбновлениеЗавершено = ПроверитьСтатусОбновленияНаСервере();
	Если ОтложенноеОбновлениеЗавершено Тогда
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтатусОбновления()

&НаСервереБезКонтекста
Функция ПроверитьСтатусОбновленияНаСервере()
	
	СведенияОбОбновлении = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
	
	РежимОбновленияДанных = ОбновлениеИнформационнойБазыСлужебный.РежимОбновленияДанных();
	НеобходимоОбновлениеИнформационнойБазы = ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
	
	Если РежимОбновленияДанных = "ОбновлениеВерсии" И НеобходимоОбновлениеИнформационнойБазы = Ложь Тогда
		ВремяОкончанияОбновления = СведенияОбОбновлении.ВремяОкончанияОбновления;
		Если ЗначениеЗаполнено(ВремяОкончанияОбновления) Тогда
			Если СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления = Неопределено Тогда
				ОтложенноеОбновлениеЗавершено = Ложь;
			Иначе
				ОтложенноеОбновлениеЗавершено = Истина;
			КонецЕсли;
			
			Если Не ОтложенноеОбновлениеЗавершено Тогда
				Если Не СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ФорсироватьОбновление") Тогда
					ФорсироватьОтложенныеОбработчики();
				КонецЕсли;			
				
				АктивныеФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Наименование, Состояние", "ОтложенноеОбновлениеИБ", СостояниеФоновогоЗадания.Активно));
				Если Не АктивныеФЗ.Количество() Тогда
					РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(Метаданные.РегламентныеЗадания.ОтложенноеОбновлениеИБ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОтложенноеОбновлениеЗавершено = Ложь;
	КонецЕсли;
	
	Возврат ОтложенноеОбновлениеЗавершено;
	
КонецФункции // ПроверитьСтатусОбновленияНаСервере()

&НаСервереБезКонтекста
Процедура ФорсироватьОтложенныеОбработчики()
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Константа.СведенияОбОбновленииИБ");
		Блокировка.Заблокировать();
		
		СведенияОбОбновлении = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
		СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Вставить("ФорсироватьОбновление");
		ОбновлениеИнформационнойБазыСлужебный.ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры // ФорсироватьОтложенныеОбработчики()

&НаКлиенте
Процедура УдалитьПатчи(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьПатчиНаСервереЗавершение", ЭтаФорма), "Будут удалены типовые патчи конфигурации. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // УдалитьПатчи()

&НаКлиенте
Процедура УдалитьПатчиНаСервереЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		fast8УдалитьПатчи();
	КонецЕсли;
	
КонецПроцедуры // УдалитьПатчиНаСервереЗавершение()


&НаКлиенте
Процедура ДобавитьКомандуУдалитьПатчи(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ДобавитьКомандуЗапуститьОтложенноеОбновление(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомандуПодтвердитьЛегальность(Команда)

	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьКомандуЗагрузитьКонфигурацию(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьКомандуОтключитьсяОтХранилища(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьКомандуПодключитьсяКХранилищу(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

